# -------------------------------------------------------------------------------
#                                  QUESTION: 1
# -------------------------------------------------------------------------------

# Boolean Assertions

# Write a minitest assertion that will fail if the value.odd? is not true.


# -------------------------------------------------------------------------------
#                                  ANSWER: 1
# -------------------------------------------------------------------------------
# assert(value.odd?, 'value is not odd')

#  or 

# assert_equal(true, value.odd?)


# ===============================================================================
# ===============================================================================
# ===============================================================================



# -------------------------------------------------------------------------------
#                                  QUESTION: 2
# -------------------------------------------------------------------------------

# Equality Assertions

# Write a minitest assertion that will fail if value.downcase does not return 'xyz'.


# -------------------------------------------------------------------------------
#                                  ANSWER: 2
# -------------------------------------------------------------------------------
# assert_equal('xyz', value.downcase)

# # or 

# assert(value.downcase == 'xyz')

# ===============================================================================
# ===============================================================================
# ===============================================================================


# -------------------------------------------------------------------------------
#                                  QUESTION: 3
# -------------------------------------------------------------------------------

# Nil Assertions

# Write a minitest assertion that will fail if value is not nil.

# -------------------------------------------------------------------------------
#                                  ANSWER: 3
# -------------------------------------------------------------------------------
# assert_nil(value)

# ===============================================================================
# ===============================================================================
# ===============================================================================


# -------------------------------------------------------------------------------
#                                  QUESTION: 4
# -------------------------------------------------------------------------------

# Empty Object Assertions

# Write a minitest assertion that will fail if the Array list is not empty.


# -------------------------------------------------------------------------------
#                                  ANSWER: 4
# -------------------------------------------------------------------------------
# assert_empty(list)  # preferred

#  or 

# assert_equal(true, list.empty?)

# ===============================================================================
# ===============================================================================
# ===============================================================================



# -------------------------------------------------------------------------------
#                                  QUESTION: 5
# -------------------------------------------------------------------------------

# Included Object Assertions

# Write a minitest assertion that will fail if the 'xyz' is not in the Array list.


# -------------------------------------------------------------------------------
#                                  ANSWER: 5
# -------------------------------------------------------------------------------
# assert_include(list, 'xyz')   # assert_include: first arg contains second arg

# # # or 

# # assert_equal(true, list.include?('xyz'))

# ===============================================================================
# ===============================================================================
# ===============================================================================


# -------------------------------------------------------------------------------
#                                  QUESTION: 6
# -------------------------------------------------------------------------------

# Exception Assertions

# Write a minitest assertion that will fail unless employee.hire raises a NoExperienceError exception.



# -------------------------------------------------------------------------------
#                                  ANSWER: 6
# -------------------------------------------------------------------------------

# assert_raises(NoExperienceError) { employee.hire } 

# does block raise exception of the named type. 

# ===============================================================================
# ===============================================================================
# =============================================================================== 


# -------------------------------------------------------------------------------
#                                  QUESTION: 7
# -------------------------------------------------------------------------------

# Type Assertions 

# Write a MiniTest that will fail if `value` is not an instance of the `Numeric` class exactly. 

# -------------------------------------------------------------------------------
#                                  ANSWER: 7
# -------------------------------------------------------------------------------

# require 'minitest/autorun' 

# class TrialTest < Minitest::Test 
#   def test_these
#     value = Numeric.new

#     assert_instance_of(Numeric, value)

#     assert_equal(Numeric, value.class)
#   end 
# end 
# ===============================================================================
# ===============================================================================
# ===============================================================================

# -------------------------------------------------------------------------------
#                                  QUESTION: 8
# -------------------------------------------------------------------------------

# Kind Assertions 

# Write a Minitest that will fail if the class of value is not Numeric or one of Numeric's subclasses (Integer, Float, etc..)

# -------------------------------------------------------------------------------
#                                  ANSWER: 8
# -------------------------------------------------------------------------------

# assert_kind_of(Numeric, value)

# ===============================================================================
# ===============================================================================
# ===============================================================================

# -------------------------------------------------------------------------------
#                                  QUESTION: 9
# -------------------------------------------------------------------------------

# Same Object Assertions

# Write a test that will fail if `list`` and the return value of `list.process` are different objects.

# -------------------------------------------------------------------------------
#                                  ANSWER: 9
# -------------------------------------------------------------------------------

# assert_same(list, list.process)
# ===============================================================================
# ===============================================================================
# ===============================================================================

# -------------------------------------------------------------------------------
#                                  QUESTION: 10 
# -------------------------------------------------------------------------------

# Refutations

# Write a test that will fail if 'xyz' is one of the elements in the Array list:


# -------------------------------------------------------------------------------
#                                  ANSWER: 
# -------------------------------------------------------------------------------
# refute_includes(list, 'xyz')

# ===============================================================================
# ===============================================================================
# ===============================================================================